############################################################
# 1. Installation des prérequis Kubernetes
############################################################
- name: Installer les paquets et composants Kubernetes
  hosts: all
  become: true
  tasks:
    - name: Installer les paquets nécessaires
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gpg
        state: present

    - name: Ajouter la clé GPG officielle de Kubernetes
      shell: >
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key |
        gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Ajouter le dépôt Kubernetes
      lineinfile:
        path: /etc/apt/sources.list.d/kubernetes.list
        line: deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /
        create: true
        mode: '0644'

    - name: Mise à jour des paquets
      apt:
        update_cache: true

    - name: Installer kubelet, kubeadm et kubectl
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present

    - name: Marquer kubelet, kubeadm et kubectl en hold
      dpkg_selections:
        name: '{{ item }}'
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl

    - name: Activer et démarrer le service kubelet
      systemd:
        name: kubelet
        enabled: true
        state: started


############################################################
# 2. Initialisation du master Kubernetes
############################################################
- name: Initialiser le master Kubernetes
  hosts: 192.168.142.137
  become: true
  tasks:
    - name: Initialiser le cluster avec kubeadm
      command: kubeadm init --cri-socket unix:///var/run/cri-dockerd.sock
      tags: [kubeadm_init]

    - name: Créer .kube/config pour l'utilisateur val_master
      shell: |
        mkdir -p /home/val_master/.kube
        cp -i /etc/kubernetes/admin.conf /home/val_master/.kube/config
        chown val_master:val_master /home/val_master/.kube/config

    - name: Appliquer le manifeste Flannel CNI
      ansible.builtin.shell:
        kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
      become: false

############################################################
# 3. Récupération de la commande de jointure
############################################################
- name: Obtenir la commande de jointure
  hosts: 192.168.142.137
  become: true
  tasks:
    - name: Générer la commande kubeadm join
      command: kubeadm token create --print-join-command
      register: join_command
      run_once: true

    - name: Sauvegarder la commande dans un fact partagé
      set_fact:
        kube_join_cmd: "{{ join_command.stdout }} --pod-network-cidr=10.244.0.0/16 --cri-socket unix:///var/run/cri-dockerd.sock"
      run_once: true


############################################################
# 4. Faire joindre les workers au cluster
############################################################
- name: Faire rejoindre les workers au cluster Kubernetes
  hosts: all
  become: true
  tasks:
    - name: Joindre les workers (sauf master)
      command: "{{ hostvars['192.168.142.137'].kube_join_cmd }}"
      when: inventory_hostname != '192.168.142.137'
      register: kubeadm_join_output_workers
      tags: [kubeadm_join_workers]


############################################################
# (Facultatif) Copier admin.conf depuis le master si nécessaire
############################################################
- name: Copier admin.conf sur les workers depuis localhost (optionnel)
  hosts: workers
  become: true
  tasks:
    - name: Rendre admin.conf lisible en local
      file:
        path: /etc/kubernetes/admin.conf
        mode: '0644'
        owner: root
        group: root
      delegate_to: localhost
      run_once: true

    - name: Copier admin.conf sur les workers
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /etc/kubernetes/admin.conf
        owner: root
        group: root
        mode: '0644'

############################################################
# 5. Configuration de .kube/config sur les workers (facultatif)
############################################################
- name: Configurer kubectl sur les workers (facultatif)
  hosts: workers
  become: true
  tasks:
    - name: Créer le répertoire .kube et copier le fichier admin.conf (Master uniquement)
      ansible.builtin.shell: |
        mkdir -p /home/val_worker1/.kube
        sudo cp -i /etc/kubernetes/admin.conf /home/val_worker1/.kube/config
        sudo chown val_worker1:val_worker1 /home/val_worker1/.kube/config
      when: inventory_hostname == '192.168.142.144'

    - name: Créer le répertoire .kube et copier le fichier admin.conf (Master uniquement)
      ansible.builtin.shell: |
        mkdir -p /home/val_worker2/.kube
        sudo cp -i /etc/kubernetes/admin.conf /home/val_worker2/.kube/config
        sudo chown val_worker2:val_worker2 /home/val_worker2/.kube/config
      when: inventory_hostname == '192.168.142.143'