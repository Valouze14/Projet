# Bloc catch-all pour bloquer les requêtes non autorisées
server {
    listen 8080 default_server;     # Port HTTP personnalisé
    listen 4443 ssl default_server; # Port HTTPS personnalisé

    ssl_certificate /etc/nginx/certs/server.crt;
    ssl_certificate_key /etc/nginx/certs/server.key;

    return 444; # Ferme la connexion sans réponse
}

# Serveur HTTP personnalisé existant
server {
    listen 8080;
    server_name mon-site-local2.test;

    root /usr/share/nginx/html;
}

# Serveur HTTPS personnalisé existant
server {
    listen 4443 ssl;
    server_name mon-site-local2.test;

    ssl_certificate /etc/nginx/certs/server.crt;
    ssl_certificate_key /etc/nginx/certs/server.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    root /usr/share/nginx/html;
}

# --- NOUVELLE CONFIGURATION POUR LE SITE WEB KUBERNETES ---

# ... (votre configuration existante) ...

# Définition du groupe de serveurs backend Kubernetes (pour le trafic HTTP vers les pods)
upstream backend_kubernetes_doc {
    # Remplacez 30000 par le NodePort de votre service Kubernetes pour le trafic HTTP
    server 192.168.142.144:30080; # Utiliser le NodePort HTTP, par exemple 30080
    server 192.168.142.143:30080; # Utiliser le NodePort HTTP, par exemple 30080
    # Ajoutez d'autres Worker Nodes si vous en avez plus
}

# Serveur HTTP pour le site de documentation Kubernetes
server {
    listen 80;
    server_name doc-site.test;

    location / {
        proxy_pass http://backend_kubernetes_doc;
        # ... (headers) ...
    }
}

# Serveur HTTPS pour le site de documentation Kubernetes (avec déchargement SSL par Nginx Master)
server {
    listen 443 ssl;
    server_name doc-site.test;

    ssl_certificate /etc/nginx/certs/server.crt;
    ssl_certificate_key /etc/nginx/certs/server.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    location / {
        # Nginx Master déchiffre HTTPS, puis envoie en HTTP au backend Kubernetes
        proxy_pass http://backend_kubernetes_doc;
        # ... (headers) ...
    }
}